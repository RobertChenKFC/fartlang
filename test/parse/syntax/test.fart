import std.dbg.Dbg.*;

class Array {
    const var DEFUALT_CAPACITY = 1u64;
    var _arr: any[];
    var _size: u64, _capacity: u64;

    Array() {
        _arr = any[](DEFAULT_CAPACITY);
        _size = 0;
        _capacity = DEFAULT_CAPACITY;
    }

    get(i: u64) -> any {
        assert(0 <= i < _size);
        return _arr[i];
    }

    set(i: u64, val: any) {
        assert(0 <= i < _size);
        _arr[i] = val;
    }

    push(val: u64) {
        if _size == _capacity {
            _capacity *= 2;
            var arr = any[](_capacity);
            for var i = 0; i < _size; i++ {
                arr[i] = _arr[i];
            }
            _arr = arr;
        }
        arr[_size] = val;
        _size++;
    }

    pop() -> any {
        assert(_size > 0);
        _size--;
        return _arr[_size];
    }

    size() -> u64 {
        return _size;
    }

    clear() {
        _size = 0;
    }
}

class Algorithm {
    fn sort(arr: Array, lt: fn (any, any) -> bool) {
        var buf = Array();
        _sort(arr, 0, arr.size(), buf, lt);
    }

    fn _sort(
            arr: Array, from: u64, to: u64, buf: Array,
            lt: fn (any, any) -> bool) {
        ##
        Classic merge sort implementation:

        Recursive and not in-place; buffer is allocated by caller
        ##

        # Edge case
        if from + 1 == to {
            return;
        }

        # Recursive calls
        var mid = from + (to - from) / 2;
        _sort(from, mid);
        _sort(mid, to);

        # Merge two partitions to buf
        var i = from, j = mid;
        buf.clear();
        while i < mid and j < to {
            if lt(arr.get(i), arr.get(j)) {
                buf.push(arr.get(i));
                i++;
            } else {
                buf.push(arr.get(j));
            }
        }
        while i < mid {
            buf.push(arr.get(i));
            i++;
        }
        while j < mid {
            buf.push(arr.get(j));
            j++;
        }

        # Copy buf to arr
        for i = 0; i < buf.size(); i++ {
            arr.set(from + i, buf.get(i));
        }
    }
}

class String {
    const var DEFAULT_CAPACITY = 8u64;
    var _arr: u8[];
    var _size: u64, _capacity: u64;

    String() {
        _arr = u8[](DEFAULT_CAPACITY);
        _arr[0] = '\0';
        _size = 1;
        _capacity = DEFAULT_CAPACITY;
    }

    push(char: u8) {
        _arr[_size - 1] = char;
        if _size == _capacity {
            _capacity *= 2;
            var arr = u8[](_capacity);
            for var i = 0; i < _size; i++ {
                arr[i] = _arr[i];
            }
            _arr = arr;
        }
        _arr[_size] = '\0';
        _size++;
    }

	length() -> u64 {
		return _size;
	} 

	toUnsigned() -> u64 {
		return StringView(_arr).toUnsigned();
	}

	get(i: u64) -> u8 {
		assert(0 <= i < _size);
		return _arr[i];
	}

	view(l: u64, r: u64) -> StringView {
		assert(0 <= l <= r <= _size);
		return StringView(_arr, l, r);
	}
}

class StringView {
	var _arr: u8[];
	var _l: u64, _r: u64;

	fn StringView(arr: u8[]) -> StringView {
		var len = 0u64;
		for ; arr[len] != '\0'; len++ {}
		return StringView(arr, 0, len);
	}

	StringView(arr: u8[], l: u64, r: u64) {
		_arr = arr;
		_l = l;
		_r = r;
	}

	length() -> u64 {
		return _size;
	}

	toUnsigned() -> u64 {
		var unsigned = 0u64;
		for var i = _l; i < _r; i++ {
			assert('0' <= _arr[i] <= '9');
			unsigned = unsigned * 10 + _arr[i] - '0';
		}
		return unsigned;
	}
}

class Utility {
    getExactFileSize(fileSize: String) -> u64 {
		var len = fileSize.length();
		assert(len >= 3);
		assert(fileSize.get(len - 1) == 'B');
		var digitsLen = len - 3 if fileSize.get(len - 2) == 'i' else len - 2;
		var exactSize = fileSize.view(0, digitsLen).toUnsigned();
		switch fileSize[len - 3] {
			case 'T' {
				exactSize *= 1e12;
			}
			case 'G' {
				exactSize *= 1e9;
			}
			case 'M' {
				exactSize *= 1e6;
			}
			case 'K' {
				exactSize *= 1e3;
			}
		}
		return exactSize;
    }
}
