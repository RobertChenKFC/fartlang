class Main {
  # Simple terms with auto type deduction
  ##
  var s_i32 = 5;
  var s_f32 = 10.;

  # Print all the primitive types
  var p_u64: bool = 4u64; # error
  var p_i64: bool = 4i64; # error
  var p_u32: bool = 4u32; # error
  var p_i32: bool = 4; # error
  var p_u16: bool = 4u16; # error
  var p_i16: bool = 4i16; # error
  var p_u8: bool = 4u8; # error
  var p_i8: bool = 4i8; # error
  var p_f64: bool = 4f64; # error
  var p_f32: bool = 4.; # error
  var p_bool: i32 = true; # error
  var p_str: bool = "hello"; # error
  var p_char: bool = 'h'; # error

  # Any should be able take on any value
  var any_str: any = "goodbye";
  var any_char: any = 'h';

  # Ternary operator
  var tern_i32: bool = 3 if true else 5; # error
  var tern_cond = 3 if 4 else 5.; # error
  var tern_mismatch = 3 if true else 5.; # error
  var tern_nested_mismatch = 3 if (false if true else 5) else 5.; # error

  # Bitwise operator
  var bit_i32: bool = 3 ^ 5; # error
  var bit_u16: bool = 3u16 | 5u16; # error
  var bit_sign = 3 & 5u32; # error
  var bit_not: bool = ~9; # error
  var bit_mismatch = 3u8 & 5u16; # error
  var bit_f32 = 1. ^ 2.; # error
  var bit_bool = true ^ false; # error
  var bit_nested_bool = (true & true) ^ false; # error

  # Logic operator
  var logic_and: i32 = true and false; # error
  var logic_or: i32 = false or true; # error
  var logic_i32 = false or 5; # error
  var logic_str = "hello" and true; # error
  var logic_nested_str = false and "hello" and true; # error
  ##

  # Comparison operator
  var comp_lt_i32_0: i32 = 3 < 5i16; # error
  var comp_lt_i32: i32 = 3 < 5i16 <= 7i8; # error
  var comp_gt_u32: i32 = 3u32 > 5u16 >= 'h'; # error
  var comp_eq_f64: i32 = 3. == 5. != 7.f64; # error
  var comp_mix = 3 < 5u32 <= 7.; # error
  var comp_wrong = 3 < true; # error
}
